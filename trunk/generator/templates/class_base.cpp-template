// generated by $generator
#if $header
$header
#end if
\#include "model/generated/${model.file_name_base}.h"

\#include <string>

\#include "model/${model.file_name}.h"
\#include "cormo/database.h"
\#include "cormo/data_source.h"
\#include "cormo/expression.h"
\#include "cormo/record.h"
\#include "cormo/string.h"
\#include "cormo/string_list.h"
\#include "cormo/update_query.h"

#for $field in $model.__foreign_keys__
\#include "model/${field.file_name}.h"
#end for

namespace cormo {
namespace model {
#if $own_namespace
namespace $own_namespace {
#end if

using generated::$model.name_base;
using std::string;

const char *$model.name_base::table_name_("$model.table_name");

#for $field in $model.__fields__
const Field $model.name_base::${field.name.capitalize}(table_name_, "$field.name", Field::$field.f_type);
#end for
#for $field in $model.__foreign_keys__
const Field $model.name_base::${field.name.capitalize}(table_name_, "$field.field", Field::kTypeInteger);
#end for

void $model.name_base::FillDataSource(DataSource<$model.name> *data_source) {
  data_source->AddSource("$model.table_name");

#for $field in $model.__foreign_keys__
  data_source->AddLeftJoin(${field.model_name}::table_name(), ${field.name.capitalize}, $model_namespace::${field.model_name}::Id);
#end for

#for $field in $model.__fields__
  data_source->AddResult(${field.name.capitalize});
#end for

#for $field in $model.__foreign_keys__
  data_source->AddResult(${field.name.capitalize});
#end for
}


void $model.name_base::Init(const Record &record) {
  assert(record.size() == ${len($model.__fields__)} + ${len($model.__foreign_keys__)});
  Record::const_iterator it = record.begin();

#for $field in $model.__fields__
  ${field.name}_ = ConvertTo< Value<value_types::$field.type> >(*it);
  ++it;
#end for

#for $field in $model.__foreign_keys__
  ${field.field}_ = ConvertTo< Value<value_types::Integer> >(*it);
  ++it;
#end for

  is_initialized_ = true;
}


void $model.name_base::FillFieldsAndValues(StringList *fields, Record *record) {
  fields->clear();
  record->clear();
  fields->reserve(${len($model.__fields__)});
  record->reserve(${len($model.__fields__)});
#for $field in $model.__fields__

  fields->push_back(${field.name.capitalize}.name());
  record->push_back(ConvertTo<RecordValue>(${field.name}_));
#end for

#for $field in $model.__foreign_keys__

  fields->push_back("${field.field}");
  record->push_back(ConvertTo<RecordValue>(${field.field}_));
#end for
}


void $model.name_base::Save() {
  assert(database_ != NULL);

  bool new_transaction = !database_->in_transaction();
  if (new_transaction) {
    database_->Begin();
    if (database_->got_error()) {
      return;
    }
  }

#if $model.__foreign_keys__
  // save foreign key objects first
  #for $field in $model.__foreign_keys__
  if (!${field.name}_.is_null()) {
    ${field.name}_.get().Save();
    ${field.field}_ = ${field.name}_.get().id();
  }
  #end for
#end if

  StringList fields;
  Record record;

  if (id_.is_null()) {
    string query = "SELECT nextval('";
    query += table_name_;
    query += "_id_seq'::regclass)";
    Records records = database_->Query(query);
    if (database_->got_error()) {
      if (new_transaction) {
        database_->Rollback();
      }
      return;
    }

    id_ = ConvertTo< Value<value_types::Integer> >(records[0][0]);

    FillFieldsAndValues(&fields, &record);
    database_->Insert(table_name_, fields, record);
    if (database_->got_error()) {
      if (new_transaction) {
        database_->Rollback();
      }
      return;
    }
    is_initialized_ = true;
  } else {
    FillFieldsAndValues(&fields, &record);
    UpdateQuery query(table_name_);
    query.Where(Id == id_);
#for $field in $model.__fields__
  #if $field.name != 'id'
    query.Add(${field.name.capitalize}, ConvertTo<RecordValue>(${field.name}_));
  #end if
#end for

#for $field in $model.__foreign_keys__
    query.Add(${field.name.capitalize}, ConvertTo<RecordValue>(${field.field}_));
#end for

    database_->Query(query.ToString());
    if (database_->got_error()) {
      if (new_transaction) {
        database_->Rollback();
      }
      return;
    }
  }

  if (new_transaction) {
    database_->Commit();
    if (database_->got_error()) {
      return;
    }
  }
}


void $model.name_base::Delete() {
  assert(database_ != NULL);

  if (id_.is_null()) {
    return;
  }

  bool new_transaction = !database_->in_transaction();
  if (new_transaction) {
    database_->Begin();
    if (database_->got_error()) {
      return;
    }
  }

  database_->Delete(table_name_, Id == id_);
  if (database_->got_error()) {
    if (new_transaction) {
      database_->Rollback();
    }
    return;
  }

  id_.reset();

  if (new_transaction) {
    database_->Commit();
    if (database_->got_error()) {
      return;
    }
  }
}

#if $own_namespace
}  // namespace $own_namespace
#end if
}  // namespace model
}  // namespace cormo
