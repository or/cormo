// generated by $generator
#if $header
$header
#end if
#ifndef ${project.upper}_${$relative_path.replace('/', '_').upper()}_${$file_name.replace('.', '_').upper}_
#define ${project.upper}_${$relative_path.replace('/', '_').upper()}_${$file_name.replace('.', '_').upper}_

\#include "cormo/data_source.h"
\#include "cormo/error.h"
\#include "cormo/field.h"
\#include "cormo/model.h"
\#include "cormo/operations.h"
\#include "cormo/value.h"

#for $field in $model.__foreign_keys__
\#include "model/${field.file_name}.h"
#end for

namespace cormo {

class Database;
class Record;
class StringList;

namespace model {
#if $own_namespace
namespace $own_namespace {
#end if

#for $field in $model.__foreign_keys__
#if $field.model_name != $model.name
class $field.model_name;
#end if
#end for

class $model.name;

namespace generated {

class $model.name_base : public Model {
 public:
  class DoesNotExist : public Error {
   public:
    DoesNotExist() : Error("$model.name: object does not exist.") {}
  };
  class NotUnique : public Error {
   public:
    NotUnique() : Error("$model.name: object not unique.") {}
  };
  static const char *table_name() { return table_name_; }
  static void FillDataSource(DataSource<$model.name> *data_source);

  explicit ${model.name_base}(Database *database) : Model(database) {}
  explicit ${model.name_base}() : Model() {}


#for $field in $model.__fields__
  static const Field ${field.name.capitalize};
#end for
#for $field in $model.__foreign_keys__
  static const Field ${field.name.capitalize};
#end for

#for $field in $model.__fields__
  const Value<value_types::$field.type> &${field.name}() const {
    return ${field.name}_;
  }
  Value<value_types::$field.type> &${field.name}() {
    return ${field.name}_;
  }
  template <class T>
  void set_${field.name}(const T &value) {
    ${field.name}_ = value;
  }

#end for
#for $field in $model.__foreign_keys__
  Value<$model_namespace::$field.model_name> &${field.name}() {
    if (!${field.field}_.is_null() && ${field.name}_.is_null()) {
      ${field.name}_ = Get<$model_namespace::${field.model_name}>(database_, ${field.field}_);
    }
    return ${field.name}_;
  }
  void set_${field.name}(const Value<$model_namespace::$field.model_name> &value) {
    ${field.name}_ = value;
    // the actual key field is no longer valid, will be filled in Save()
    ${field.field}_.reset();
  }
  void set_${field.name}(const $model_namespace::$field.model_name &value) {
    ${field.name}_ = value;
    // the actual key field is no longer valid, will be filled in Save()
    ${field.field}_.reset();
  }

#end for

  virtual void Init(const Record &record);
  virtual Error Save();
  virtual Error Delete();

 protected:
  virtual void FillFieldsAndValues(StringList *fields, Record *record);

 private:
  static const char *table_name_;

#for $field in $model.__fields__
  Value<value_types::$field.type> ${field.name}_;
#end for

#for $field in $model.__foreign_keys__
#if $field.model_name != $model.name
  Value<value_types::Integer> ${field.field}_;
  Value<$model_namespace::$field.model_name> ${field.name}_;
#end if
#end for
};

}  // namespace generated
#if $own_namespace
}  // namespace $own_namespace
#end if
}  // namespace model
}  // namespace cormo

#endif  // ${project.upper}_${$relative_path.replace('/', '_').upper()}_${$file_name.replace('.', '_').upper}_
